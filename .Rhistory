foottext) %>%
writeLines("test.html")
paste0("<div class='", group_tag_imagen, "' >",
htmltools::img(src = imgurl), "</div>")
scroll_section <- function(content,
position,
imgurl){
if(position == "right"){
term <- "scrollHalf"
} else if(position == "left"){
term <- "halfScroll"
}
group_tag <- paste0(term, "__group")
group_tag_content <- paste0(term, "__group__content")
group_tag_imagen <- paste0(term, "__group__imagen")
inside_div <-
paste0(
paste0("<div class='", group_tag, "' data-scroll>"),
paste0("<div class='", group_tag_content, "' >",
content, "</div>"),
paste0("<div class='", group_tag_imagen, "' >",
htmltools::img(src = imgurl), "</div>"),
"</div>"
)
inside_div
}
paste0(headtext,
"<body>",
scroll_section(content = "hello", position = "left", imgurl = "google.com"),
"</body>",
foottext) %>%
htmltools::html_print()
paste0(headtext,
"<body>",
scroll_section(content = "hello", position = "left", imgurl = "https://gph.is/g/ajq9zej"),
"</body>",
foottext) %>%
writeLines("test.html")
csstext_col
p
p <-
paste(headtext,
csstext_col,
'</head>')
p
paste0(p,
"<body>",
scroll_section(content = "hello", position = "left", imgurl = "https://gph.is/g/ajq9zej"),
"</body>",
foottext) %>%
writeLines("test.html")
headtext <-
c(
"<!DOCTYPE html>
<html>
<head>")
foottext <- readLines(con = "inst/footer.html", warn = FALSE) %>% paste(collapse = " ")
csstext <- readLines(con = "inst/style.css", warn = FALSE)
csstext_col <- paste(csstext, collapse = " ")
p <-
paste(headtext,
'<style>',
csstext_col,
'</style>',
'</head>')
paste0(p,
"<body>",
scroll_section(content = "hello", position = "left", imgurl = "https://gph.is/g/ajq9zej"),
"</body>",
foottext) %>%
writeLines("test.html")
paste0(p,
"<body>",
scroll_section(content = "hello", position = "left", imgurl = "https://gph.is/g/ajq9zej"),
scroll_section(content = "hello", position = "right", imgurl = "https://gph.is/g/ajq9zej"),
"</body>",
foottext) %>%
writeLines("test.html")
paste0(p,
"<body>",
scroll_section(content = "hello", position = "left", imgurl = "https://outwardhound.com/furtropolis//wp-content/uploads/2020/03/Doggo-Lingo-Post.jpg"),
scroll_section(content = "hello", position = "right", imgurl = "https://outwardhound.com/furtropolis//wp-content/uploads/2020/03/Doggo-Lingo-Post.jpg"),
"</body>",
foottext) %>%
writeLines("test.html")
paste0(p,
"<body>",
scroll_section(content = "hello", position = "left", imgurl = "https://outwardhound.com/furtropolis//wp-content/uploads/2020/03/Doggo-Lingo-Post.jpg"),
scroll_section(content = "hello again", position = "right", imgurl = "https://outwardhound.com/furtropolis//wp-content/uploads/2020/03/Doggo-Lingo-Post.jpg"),
scroll_section(content = "hello x three", position = "right", imgurl = "https://outwardhound.com/furtropolis//wp-content/uploads/2020/03/Doggo-Lingo-Post.jpg"),
"</body>",
foottext) %>%
writeLines("test.html")
paste0(p,
"<body>",
scroll_section(content = "<h1>hello</h1>", position = "left", imgurl = "https://outwardhound.com/furtropolis//wp-content/uploads/2020/03/Doggo-Lingo-Post.jpg"),
scroll_section(content = "hello again", position = "right", imgurl = "https://outwardhound.com/furtropolis//wp-content/uploads/2020/03/Doggo-Lingo-Post.jpg"),
scroll_section(content = "hello x three", position = "right", imgurl = "https://outwardhound.com/furtropolis//wp-content/uploads/2020/03/Doggo-Lingo-Post.jpg"),
"</body>",
foottext) %>%
writeLines("test.html")
change_yaml_matter <- function(input_file, ..., output_file) {
input_lines <- readLines(input_file)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
return(yaml_list)
# dots <- list(...)
# yaml_list <- c(yaml_list[ setdiff(names(yaml_list), names(dots)) ], dots)
#
# output_lines <- c(
#   if (delimiters[1] > 0) input_lines[1:(delimiters[1])],
#   strsplit(yaml::as.yaml(yaml_list), "\n")[[1]],
#   input_lines[ -(1:(delimiters[2]-1)) ]
# )
#
# if (missing(output_file)) {
#   return(output_lines)
# } else {
#   writeLines(output_lines, con = output_file)
#   return(invisible(output_lines))
# }
}
change_yaml_matter("Markdown/1.md")
change_yaml_matter("Markdown/1.md")
parse_yaml <- function(input_file, key = "imgurl") {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
return(yaml_list[[key]])
}
parse_yaml("Markdown/1.md")
parse_yaml <- function(input_file) {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
return(delimiters)
}
parse_yaml("Markdown/1.md")
parse_yaml <- function(input_file) {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
content <- input_lines[(delimiters[2]+1): length(input_lines)]
return(content)
}
parse_yaml("Markdown/1.md")
parse_yaml <- function(input_file) {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
content <- input_lines[(delimiters[2]+1): length(input_lines)]
list(position = yaml_list[["position"]],
imgurl = yaml_list[["imgurl"]],
content = content)
}
parse_yaml("Markdown/1.md")
parse_yaml <- function(input_file) {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
content <- input_lines[(delimiters[2]+1): length(input_lines)]
list(position = yaml_list[["position"]],
imgurl = yaml_list[["imgurl"]],
content = content)
}
parse_yaml("Markdown/1.md")
parse_yaml <- function(input_file) {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
content <- input_lines[(delimiters[2]+1): length(input_lines)]
content <- paste(content, collapse = "\n")
list(position = yaml_list[["position"]],
imgurl = yaml_list[["imgurl"]],
content = content)
}
parse_yaml("Markdown/1.md")
parse_yaml <- function(input_file) {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
content <- input_lines[(delimiters[2]+1): length(input_lines)]
content <- paste(content, collapse = "\n")
list(position = yaml_list[["position"]],
imgurl = yaml_list[["imgurl"]],
content = md2html(content)) # convert to HTML from Markdown
}
parse_yaml("Markdown/1.md")
#' This is a wrapper around `markdown::markdownToHTML()`, where
#' the default behaviour is to produce a HTML fragment.
#' `htmltools::HTML()` is then used to evaluate the HTML code
#' within a RMarkdown chunk.
#'
#' @importFrom htmltools HTML
#' @importFrom markdown markdownToHTML
#'
#' @param text Character vector containing Markdown text
#'
md2html <- function(text){
html_chunk <- markdown::markdownToHTML(text = text,
fragment.only = TRUE)
htmltools::HTML(html_chunk)
}
parse_yaml("Markdown/1.md")
parse_md <- function(input_file) {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
content <- input_lines[(delimiters[2]+1): length(input_lines)]
content <- paste(content, collapse = "\n")
list(position = yaml_list[["position"]],
imgurl = yaml_list[["imgurl"]],
content = md2html(content)) # convert to HTML from Markdown
}
parse_md("Markdown/1.md")
parse_md("Markdown/1.md") %>%
purrr::pmap(scroll_section)
parse_md("Markdown/1.md") %>%
purrr::pmap_chr(scroll_section)
parse_md("Markdown/1.md")
tibble(parse_md("Markdown/1.md"))
parse_md <- function(input_file) {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
content <- input_lines[(delimiters[2]+1): length(input_lines)]
content <- paste(content, collapse = "\n")
tibble(position = yaml_list[["position"]],
imgurl = yaml_list[["imgurl"]],
content = md2html(content)) # convert to HTML from Markdown
}
parse_md("Markdown/1.md")
parse_md("Markdown/1.md") %>%
purrr::pmap_chr(scroll_section)
bind_rows(parse_md("Markdown/1.md"),
parse_md("Markdown/1.md"),
parse_md("Markdown/1.md"))
bind_rows(parse_md("Markdown/1.md"),
parse_md("Markdown/1.md"),
parse_md("Markdown/1.md")) %>%
purrr::pmap_chr(scroll_section)
generate_scroll_doc <- function(path, inputs){
headtext <- c(
"<!DOCTYPE html>
<html>
<head>")
foottext <- readLines(con = "inst/footer.html", warn = FALSE) %>% paste(collapse = " ")
csstext <- readLines(con = "inst/style.css", warn = FALSE)
csstext_col <- paste(csstext, collapse = " ")
p <- paste(headtext, '<style>', csstext_col, '</style>', '</head>')
input_chr <-
inputs %>%
purrr::pmap_chr(inputs) %>%
paste(collapse = " ")
paste0(p,
"<body>",
input_chr,
"</body>",
foottext) %>%
writeLines(path)
}
bind_rows(parse_md("Markdown/1.md"),
parse_md("Markdown/1.md"),
parse_md("Markdown/1.md"))
test_tibble <-
bind_rows(parse_md("Markdown/1.md"),
parse_md("Markdown/1.md"),
parse_md("Markdown/1.md"))
generate_scroll_doc(path = "test-from-function.html",
inputs = test_tibble)
test_tibble
generate_scroll_doc(path = "test-from-function.html",
inputs = test_tibble)
rlang::last_error()
generate_scroll_doc <- function(path, inputs){
headtext <- c(
"<!DOCTYPE html>
<html>
<head>")
foottext <- readLines(con = "inst/footer.html", warn = FALSE) %>% paste(collapse = " ")
csstext <- readLines(con = "inst/style.css", warn = FALSE)
csstext_col <- paste(csstext, collapse = " ")
p <- paste(headtext, '<style>', csstext_col, '</style>', '</head>')
input_chr <-
inputs %>%
purrr::pmap_chr() %>%
paste(collapse = " ")
paste0(p,
"<body>",
input_chr,
"</body>",
foottext) %>%
writeLines(path)
}
generate_scroll_doc(path = "test-from-function.html",
inputs = test_tibble)
generate_scroll_doc <- function(path, inputs){
headtext <- c(
"<!DOCTYPE html>
<html>
<head>")
foottext <- readLines(con = "inst/footer.html", warn = FALSE) %>% paste(collapse = " ")
csstext <- readLines(con = "inst/style.css", warn = FALSE)
csstext_col <- paste(csstext, collapse = " ")
p <- paste(headtext, '<style>', csstext_col, '</style>', '</head>')
input_chr <-
inputs %>%
purrr::pmap_chr(parse_md) %>%
paste(collapse = " ")
paste0(p,
"<body>",
input_chr,
"</body>",
foottext) %>%
writeLines(path)
}
generate_scroll_doc(path = "test-from-function.html",
inputs = test_tibble)
generate_scroll_doc <- function(path, inputs){
headtext <- c(
"<!DOCTYPE html>
<html>
<head>")
foottext <- readLines(con = "inst/footer.html", warn = FALSE) %>% paste(collapse = " ")
csstext <- readLines(con = "inst/style.css", warn = FALSE)
csstext_col <- paste(csstext, collapse = " ")
p <- paste(headtext, '<style>', csstext_col, '</style>', '</head>')
input_chr <-
inputs %>%
purrr::pmap_chr(scroll_section) %>%
paste(collapse = " ")
paste0(p,
"<body>",
input_chr,
"</body>",
foottext) %>%
writeLines(path)
}
generate_scroll_doc(path = "test-from-function.html",
inputs = test_tibble)
parse_md <- function(input_file) {
input_lines <- readLines(input_file, warn = FALSE)
delimiters <- grep("^---\\s*$", input_lines)
if (!length(delimiters)) {
stop("unable to find yaml delimiters")
} else if (length(delimiters) == 1L) {
if (delimiters[1] == 1L) {
stop("cannot find second delimiter, first is on line 1")
} else {
# found just one set, assume it is *closing* the yaml matter;
# fake a preceding line of delimiter
delimiters <- c(0L, delimiters[1])
}
}
delimiters <- delimiters[1:2]
yaml_list <- yaml::yaml.load(input_lines[ (delimiters[1]+1):(delimiters[2]-1) ])
content <- input_lines[(delimiters[2]+1): length(input_lines)]
content <- paste(content, collapse = "\n")
data.frame(position = yaml_list[["position"]],
imgurl = yaml_list[["imgurl"]],
content = md2html(content)) # convert to HTML from Markdown
}
parse_md("Markdown/1.md") %>%
purrr::pmap_chr(scroll_section)
parse_md("Markdown/1.md")
parse_md(".dev/Markdown/1.md")
bind_rows(parse_md(".dev/Markdown/1.md"),
parse_md(".dev/Markdown/1.md"),
parse_md(".dev/Markdown/1.md")) %>%
purrr::pmap_chr(scroll_section)
bind_rows(parse_md(".dev/Markdown/1.md"),
parse_md(".dev/Markdown/1.md"),
parse_md(".dev/Markdown/1.md"))
system.file("inst", package = "wpa")
system.file("R", package = "wpa")
system.file("preamble", package = "wpa")
roxygen2::roxygenise()
usethis::use_gpl3_license()
?usethis::use_gpl3_license()
usethis::use_gpl3_license(name = "Martin Chan")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
usethis::use_pipe()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
devtools::check()
